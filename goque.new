package goque

const queueSize uint16 = 65535

type Queue[T any] struct {
	in chan req[T]
	out chan T

	size *uintptr
}

type req[T any] struct {
	method uint8
	value T
}

func New[T any]() *Queue[T] {
	size := uintptr(0)
	start := uint16(0)
	end := uint16(0)
	var null T

	queue := [uint32(queueSize)+1]T{}
	overflow := []T{}

	in := make(chan req[T])
	out := make(chan T)

	q := &Queue[T]{
		in: in,
		out: out,

		size: &size,
	}

	go func(){
		for {
			input := <-in

			if input.method == 0 { // Add
				if size > uintptr(queueSize) {
					overflow = append(overflow, input.value)
					size++
				}else{
					queue[end] = input.value
					end++
					size++
				}
			}else if input.method == 1 { // Next
				if *q.size == 0 {
					out <- null
				}else{
					out <- queue[start]
					queue[start] = null
					start++
					size--

					if len(overflow) != 0 {
						queue[end] = (overflow)[0]
						overflow = (overflow)[1:]
						end++
					}
				}

			}
			
		}
	}()

	return q
}

func (q *Queue[T]) Add(value T){
	q.in <- req[T]{
		method: 0,
		value: value,
	}
}

func (q *Queue[T]) Next() T {
	q.in <- req[T]{
		method: 1,
	}

	return <-q.out
}

func (q *Queue[T]) Len() uintptr {
	return *q.size
}
